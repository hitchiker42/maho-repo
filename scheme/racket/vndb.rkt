#lang racket/base
(require "util.rkt" "io.rkt" "ffi/ffi.rkt")
(require json)
(require openssl)
(define vndb-port 19534)
(define vndb-tls-port 19535)
(define vndb-hostname "api.vndb.org")

(define vndb-cache-file (build-path (current-directory) "vndb.cache"))
(define vndb-tags-file (build-path (current-directory) "vndb.tags"))
(define vndb-traits-file (build-path (current-directory) "vndb.traits"))
(define (json->scheme (what (current-input-port)) #:null (jsnull json-null))
  (cond
   ((path? what) (read-json (open-input-file what)))
   ((string? what) (string->jsexpr what jsnull))
   ((bytes? what) (bytes->jsexpr what jsnull))
   ((port? what) (read-json what jsnull))))
(define-once vndb-cache-box (malloc-immobile-cell #f))
                                        ;(define (vndb-cache) (ptr-ref vndb-cache-box _scheme))
;;(define vndb-cache #f)
(define vndb-cache (read (open-input-file vndb-cache-file)))
;;use this to prevent a procudure from closing over the value of vndb-cache
(define (get-vndb-cache) vndb-cache)
(define-once vndb-tags-box (malloc-immobile-cell #f))
(define (vndb-tags) (ptr-ref vndb-tags-box _scheme))
(define-once vndb-traits-box (malloc-immobile-cell #f))
(define (vndb-traits) (ptr-ref vndb-traits-box _scheme))
(define-once cache-loaded? #f)
(define (load-cache-files)
  (values (false-if-exception (json->scheme vndb-cache-file))
          (false-if-exception (json->scheme vndb-tags-file))
          (false-if-exception (json->scheme vndb-traits-file))))
(require racket/place)
;;define-once to avoid creating a new place each time the module is loaded
(define-once load-place #f) 
(define (do-load-cache)
  (set! load-place (dynamic-place "places.rkt" 'load-vndb-cache-proc))
  (place-channel-put load-place vndb-cache-box)
  (place-channel-put load-place vndb-tags-box)
  (place-channel-put load-place vndb-traits-box))
;; (unless cache-loaded?
;;   (do-load-cache)
;;   (set! cache-loaded? #t))
;vndb-cache
