/* MLton g9939d52 (built Mon Mar 18 11:29:49 EDT 2013 on portable-tucker-fedora) */
/*   created this file on Thu Mar 28 14:14:05 2013. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (natlist, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): ignore */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): false */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: natlist */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /home/tucker/usr/lib */
/*    lib target dir: /home/tucker/usr/lib/targets/self */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: self */
/*    target arch: AMD64 */
/*    target OS: Linux */
/*    type check: false */
/*    verbosity: Silent */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl MLton_jumpToSML
.hidden MLton_jumpToSML
MLton_jumpToSML:
	subq $0x48,%rsp
	movq %rbp,0x40(%rsp)
	movq %rbx,0x38(%rsp)
	movq %r12,0x30(%rsp)
	movq %r13,0x28(%rsp)
	movq %r14,0x20(%rsp)
	movq %r15,0x18(%rsp)
	movq c_stackP(%rip),%rbx
	movq %rbx,0x10(%rsp)
	movq %rsp,c_stackP(%rip)
	movq (gcState+0x10)(%rip),%rbp
	movq (gcState+0x0)(%rip),%r12
	jmp *%rdi
.p2align 0x4
.globl Thread_returnToC
.hidden Thread_returnToC
Thread_returnToC:
	movq c_stackP(%rip),%rsp
	movq 0x10(%rsp),%rbx
	movq %rbx,c_stackP(%rip)
	movq 0x18(%rsp),%r15
	movq 0x20(%rsp),%r14
	movq 0x28(%rsp),%r13
	movq 0x30(%rsp),%r12
	movq 0x38(%rsp),%rbx
	movq 0x40(%rsp),%rbp
	addq $0x48,%rsp
	ret
.text
.p2align 0x4
.globl F_0
.hidden F_0
F_0:
L_0:
	movq (gcState+0x18)(%rip),%r15
	cmpq %rbp,%r15
	setb %al
	movzbl %al,%eax
	testl %eax,%eax
	movl %eax,(globalWord32+0x0)(%rip)
	jnz L_7
L_1:
	movq (gcState+0x8)(%rip),%r14
	cmpq %r12,%r14
	setb %bl
	movzbl %bl,%ebx
	testl %ebx,%ebx
	movl %ebx,(globalWord32+0x4)(%rip)
	jnz L_87
L_2:
	movq $0x1F,%r15
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,%r13
	movq %r15,0x0(%r12)
	movq %r12,%r12
	addq $0x10,%r12
	movq $0x1,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x11,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	movq $0x48,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r11
	movq %r11,%rdi
	xorq %r14,%r14
	movq %r14,%rax
	addq $0x8,%rbp
	leaq (L_3+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,0x0(%r13)
	movq %r13,(globalObjptr+0x0)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_3
.p2align 0x4
.long 0x0
L_3:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x11,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	movq $0x48,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r13
	movq %r13,%rdi
	xorq %r14,%r14
	xchgq %r14,%rax
	addq $0x8,%rbp
	leaq (L_4+0x0)(%rip),%r13
	movq %r13,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0x8)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_4
.p2align 0x4
.long 0x0
L_4:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq (c_stackP+0x0)(%rip),%r14
	movq %r14,%rsp
	movq $0x11,%r14
	movq %r14,%rcx
	xorq %r14,%r14
	movq %r14,%rdx
	movq $0x48,%r14
	movq %r14,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%r13
	movq %r13,%rdi
	xorq %r14,%r14
	xchgq %r14,%rax
	addq $0x8,%rbp
	leaq (L_5+0x0)(%rip),%r13
	movq %r13,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r15,(globalObjptr+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_5
.p2align 0x4
.long 0x0
L_5:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,%r15
	movq $0x19,%r14
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,%r11
	movq %r14,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movw $0x4641,%r14w
	movzwl %r14w,%r13d
	movl %r13d,%r14d
	xorl %r10d,%r10d
	movq $0x1,%r9
	movq %r9,0x8(%r11)
	movl %r14d,0x0(%r11)
	movl %r10d,0x4(%r11)
	movq $0x19,%r8
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,%rsi
	movq %r8,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movw $0x6661,%r8w
	movzwl %r8w,%esp
	movl %esp,%r8d
	xorl %edi,%edi
	movq %r11,%rdx
	movq %rdx,0x8(%rsi)
	movl %edi,0x4(%rsi)
	movl %r8d,0x0(%rsi)
	movq $0x1B,%rcx
	movq %r12,%rbx
	addq $0x8,%rbx
	movq %rbx,%r14
	movq %rcx,0x0(%r12)
	movq %r12,%r12
	addq $0x18,%r12
	movq (globalObjptr+0x38)(%rip),%rcx
	movq %rcx,%rbx
	movq $0x1,%r10
	addq $0x8,%rbp
	leaq (L_6+0x0)(%rip),%r9
	movq %r9,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %r10,0x8(%r14)
	movq %rbx,0x0(%r14)
	movq %r14,(globalObjptr+0x30)(%rip)
	movl %esp,(globalWord32+0xC)(%rip)
	movq %rsi,(globalObjptr+0x28)(%rip)
	movl %r13d,(globalWord32+0x8)(%rip)
	movq %r11,(globalObjptr+0x20)(%rip)
	movq %r15,(globalObjptr+0x18)(%rip)
	jmp main_0
.p2align 0x4
L_87:
L_7:
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movl $0x0,%r15d
	movl %r15d,%r14d
	movq %r14,%rdx
	xorq %r15,%r15
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r15,%r15
	movq %r15,%rax
	addq $0x8,%rbp
	leaq (L_8+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r15
	movq %r15,%r12
	movq (gcState+0x10)(%rip),%r15
	movq %r15,%rbp
	jmp L_8
.p2align 0x4
.long 0x0
L_8:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	jmp L_2
.p2align 0x4
.long 0x1
L_6:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%r15
	movq %r15,%rsp
	movq (globalObjptr+0x40)(%rip),%r15
	movq %r15,%r14
	movq %r14,%rdi
	xorq %r14,%r14
	movq %r14,%rax
	call MLton_bug
.text
.p2align 0x4
.globl main_0
.hidden main_0
main_0:
L_9:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_10
L_85:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_86+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_86
.p2align 0x4
.long 0x0
L_86:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
L_10:
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	movq $0x4000000000000000,%r15
	movq %r15,0x10(%rbp)
.p2align 0x4,,0x7
loop_0:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_117
.p2align 0x4,,0x7
L_11:
	movq 0x10(%rbp),%r15
	testq %r15,%r15
	jz L_90
L_12:
	movq 0x8(%rbp),%r15
	incq %r15
	jo L_89
L_18:
	movq %r15,0x8(%rbp)
	movq $0x1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	movq $0x0,0x10(%rbp)
	jmp loop_0
.p2align 0x4
L_89:
L_13:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x48)(%rip),%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_14+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_14
.p2align 0x4
.long 0x0
L_14:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x50)(%rip),%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_15+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_15
.p2align 0x4
.long 0x0
L_15:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x38)(%rip),%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_16+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_16
.p2align 0x4
.long 0x0
L_16:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x58)(%rip),%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_17+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call MLton_bug
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_17
.p2align 0x4
.long 0x0
L_17:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_90:
L_19:
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_24
L_20:
	movq 0x0(%r14),%r15
.p2align 0x4,,0x7
loop_1:
	cmpq $0x1,%r15
	je L_91
L_21:
	movq 0x0(%r15),%r15
	jmp loop_1
.p2align 0x4
L_91:
L_22:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_24
L_80:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_81+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_81
.p2align 0x4
.long 0x0
L_81:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
L_24:
	movq $0x13,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x8(%rbp)
	movq $0x1,0x10(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movq %r15,0x18(%rbp)
.p2align 0x4,,0x7
loop_2:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_114
.p2align 0x4,,0x7
L_25:
	movq 0x18(%rbp),%r15
	testq %r15,%r15
	jz L_93
L_26:
	movq 0x10(%rbp),%r15
	incq %r15
	jo L_13
L_27:
	movq %r15,0x10(%rbp)
	movq $0x1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x8(%rbp)
	movq $0x0,0x18(%rbp)
	jmp loop_2
.p2align 0x4
L_93:
L_28:
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_32
L_29:
	movq 0x0(%r14),%r15
.p2align 0x4,,0x7
loop_3:
	cmpq $0x1,%r15
	je L_94
L_30:
	movq 0x0(%r15),%r15
	jmp loop_3
.p2align 0x4
L_94:
L_32:
	movq (globalObjptr+0x0)(%rip),%r15
	movq %r15,0x8(%rbp)
	movq $0x1,0x10(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movq %r15,0x18(%rbp)
.p2align 0x4,,0x7
loop_4:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_112
.p2align 0x4,,0x7
L_33:
	movq 0x18(%rbp),%r15
	testq %r15,%r15
	jz L_96
L_34:
	movq 0x10(%rbp),%r15
	incq %r15
	jo L_13
L_35:
	movq %r15,0x10(%rbp)
	movq $0x1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x8(%rbp)
	movq $0x0,0x18(%rbp)
	jmp loop_4
.p2align 0x4
L_96:
L_36:
	movq 0x8(%rbp),%r14
	cmpq $0x1,%r14
	je L_40
L_37:
	movq 0x0(%r14),%r15
.p2align 0x4,,0x7
loop_5:
	cmpq $0x1,%r15
	je L_97
L_38:
	movq 0x0(%r15),%r15
	jmp loop_5
.p2align 0x4
L_97:
L_40:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_6:
	cmpq $0x100,%r15
	jnl L_98
L_73:
	incq %r15
	jmp loop_6
.p2align 0x4
L_98:
L_41:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_7:
	cmpq $0x100,%r15
	jnl L_99
L_72:
	incq %r15
	jmp loop_7
.p2align 0x4
L_99:
L_42:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_8:
	cmpq $0x100,%r15
	jnl L_100
L_71:
	incq %r15
	jmp loop_8
.p2align 0x4
L_100:
L_43:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_9:
	cmpq $0x100,%r15
	jnl L_104
L_61:
	movb %r15b,%dl
	movq (globalObjptr+0x28)(%rip),%r14
	movw $0x3930,%r11w
	movq %r15,%r13
	movw %r11w,%r15w
.p2align 0x4,,0x7
L_62:
	movw %r15w,%r11w
	shrw $0x8,%r11w
	movb %r11b,%r10b
	movb %r15b,%r11b
	cmpb %r11b,%dl
	jb L_103
L_63:
	cmpb %dl,%r10b
	jnb L_102
	movq %r13,(localWord64+0x0)(%rip)
L_67:
	cmpq $0x1,%r14
	je L_101
L_68:
	movw 0x0(%r14),%r15w
	movq 0x8(%r14),%r14
	movq (localWord64+0x0)(%rip),%r13
	jmp L_62
.p2align 0x4
L_101:
L_65:
	movq (localWord64+0x0)(%rip),%r15
	incq %r15
	jmp loop_9
.p2align 0x4
L_102:
	movq %r13,(localWord64+0x0)(%rip)
	jmp L_65
.p2align 0x4
L_103:
	movq %r13,(localWord64+0x0)(%rip)
	jmp L_67
.p2align 0x4
L_104:
L_44:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_10:
	cmpq $0x100,%r15
	jnl L_105
L_60:
	incq %r15
	jmp loop_10
.p2align 0x4
L_105:
L_45:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x11,%rcx
	movq $0x21,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_46+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_46
.p2align 0x4
.long 0x2
L_46:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_11:
	cmpq $0x21,%r15
	jnl L_106
L_59:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_11
.p2align 0x4
L_106:
L_47:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x11,%rcx
	movq $0x41,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_48+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_48
.p2align 0x4
.long 0x2
L_48:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	xorq %r15,%r15
	movq %rax,%r14
.p2align 0x4,,0x7
loop_12:
	cmpq $0x41,%r15
	jnl L_107
L_58:
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_12
.p2align 0x4
L_107:
L_49:
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_13:
	cmpq $0x1,%r15
	jnl L_108
L_57:
	incq %r15
	jmp loop_13
.p2align 0x4
L_108:
L_50:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_51
L_55:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_56+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_56
.p2align 0x4
.long 0x2
L_56:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_51:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movb $0x1,%r14b
	movzbl %r14b,%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,%r14
	movq %r13,0x0(%r15)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movb $0x2,%r14b
	movzbl %r14b,%r10d
	movl %r10d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,%r14
	movq %r13,0x0(%r15)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movb $0x0,%r14b
	movzbl %r14b,%r10d
	movl %r10d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	xorl %r14d,%r14d
	movl $0x0,0x4(%r15)
	testl %r14d,%r14d
	movl %r14d,0x0(%r15)
	jnz L_109
L_52:
	movl $0x1,0x0(%r15)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	movq %rbp,(gcState+0x10)(%rip)
	call MLton_halt
.p2align 0x4
L_109:
L_53:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0x60)(%rip),%rdi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_54+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Stdio_print
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_54
.p2align 0x4
.long 0x0
L_54:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rbp,(gcState+0x10)(%rip)
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x1,%r15d
	movl %r15d,%esi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call MLton_halt
.p2align 0x4
L_112:
L_75:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_76+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_76
.p2align 0x4
.long 0x3
L_76:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_33
.p2align 0x4
L_114:
L_78:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_79+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_79
.p2align 0x4
.long 0x3
L_79:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_25
.p2align 0x4
L_117:
L_83:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_84+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84
.p2align 0x4
.long 0x4
L_84:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_11
