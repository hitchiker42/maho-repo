(require 'cl)
(cl-defmacro seq (&key (start 0) (end 10) (step 1))
`(let ((seq-count ,start)
       (seq-list ()))
   (while (< seq-count ,end)
     (setq seq-list (cons seq-count seq-list))
     (setq seq-count (+ seq-count ,step)))
     (princ (reverse  seq-list))))
(cl-defmacro my-dotimes (var end &rest body);; &key (start 0) (step (/ end (abs end))))
  `(lexical-let ((x 0))
     (while (<= (abs x) (abs ,end))
       (let ((',var x))
        (progn ,@body))
       (setq x (+ var 1)))))
(defmacro body-test (&rest body)
  `(progn ,@body))
