(require 'cl-lib)
;;actually useful
(defun to-hex (dec)
  (format "%x" dec))
(cl-defmacro seq (&key (start 0) (end 10) (step 1))
`(let ((seq-count ,start)
       (seq-list ()))
   (while (< seq-count ,end)
     (setq seq-list (cons seq-count seq-list))
     (setq seq-count (+ seq-count ,step)))
     (princ (reverse  seq-list))))
(defmacro stringify (&rest args)
  `(mapconcat #'(lambda (s) (symbol-name s)) ',args " ")) 
(defmacro insert-format (&rest format-string)
  `(insert (format ,@format-string)))
(defmacro insert-format-fun (name arglist &rest format-string)
  `(defun ,name (,@arglist)
     (insert (format ,@format-string))))

