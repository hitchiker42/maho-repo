1. You have 'n' balconies, each of which can seat an arbitrary number of people;
   'n' people to seat and a list of 'm' pairs of the form (i,j). Devise an
   algorithms to seat people such that 'i' is not in the same balcony, or the
   balcony above 'j' for all m pairs (i,j), or decides if this is impossible in
   time O(m+n).

Try either dynamic programming, or something to do with graphs, probably graphs

int** seat(int n, int m, struct {i,j} *rules);

2. Given a set of 'n' points representing wifi demand and a set of 'm'
points representing sources, each of the m points has a radius 'R' and a
bandwidth 'T' give an algorithm O((nb)^k) which determines if the sources can
supply all 'n' points with bandwith.
#+BEGIN_SRC C
  struct location {double x; double y};
  struct source {location l; double radius;
    int bandwith; location *covered; int num_covered};
  struct graph {location *vertices,
      struct {int start; int end} *edges };
  struct edge {location start; location end; double weight};
  /*
    I'm going to assume the the internals of these functions
    do what the name suggests, and not actually write them
  ,*/
  void add_vertex(graph g, location l);
  void add_edge(graph g, edge e);
  int find_max_flow(graph g);
  double dist(location l1, location l2){
    //assume ^ is exponentation not xor
    return sqrt((l1.x-l2.x)^2 + (l1.y-l2.y)^2);
  }
  bool wifi_cover(int n, int m, location *destinations, source *sources){
    int i,j;
    graph G;
    //these are arbitary start and end points added
    //so that the flow algorithm will work
    location start = {.x = 0, .y = 0};
    location end = {.x = 1, .y = 1};
    for(i=0;i<m;i++){
      source src = sources[i];
      for(j=0;j<n;j++){
        location dest = destinations[j];
        if(dist(src.l,dest) < src.radius){
          push(dest, src.covered);
        }
      }
    }
    for(i=0;i<n;i++){
      add_vertex(G, destinations[i]);
      add_edge(G,{destinations[i],end,1});
    }
    for(i=0;i<m;i++){
      source src = sources[i];
      add_vertex(G,src.l);
      add_edge(G, {start, src.l,1});
      for(j=0;j<src.num_covered;j++){
        add_edge(G, {src.l, src.covered[j], 1});
      }
    }

    int flow = find_max_flow(g);
    return flow < n;
  }
#+END_SRC C

Flow problem, connent all destinations to a  new sigular destination, and all
sources to a new sources, connect each source to each possible destination with
a flow of 1, calclulate the max flow, if it's less than the number of
destinations than we can't if it's equal we can

3. Given a set of houses with known locations on a line determine the minimum
   number of cell towers such that each house is with 4 miles of a tower
#+BEGIN_SRC C
  int *min_towers(int *house_locations, int num_houses){
    /*
      Greedy algorithm, place each tower so that it is 4 miles left from the
      left-most house not within four miles of a tower, repeat untill all
      houses are within 4 miles of a tower, this runs in O(N) where N
      is the number of houses.

     ,*/
    int max_covered = house_locations[0]+8;
    int num_towers = 1;
    int i;
    for(i=1;i<num_houses;i++){
      if(house_locations[i] > max_covered){
        num_towers++;
        max_covered = house_locations[i]+8;
      }
    }
    return num_towers;
  }

#+END_SRC

Be greedy, place a new tower four miles to the last of the uncovered house,
repeat

4. Given two databases with n values each determine the median of the
   2n values, You can only query the databases by asking for the kth smallest
   value in the database, find an algorithm to do this in O(lg(n)) time.

int find_median(int n, int *db1, int *db2){
#+BEGIN_SRC C
  int query(int *db, int k);
  int find_median(int n, int *db1, int *db2){
    int db1_median, db2_median;
    int k = n/2;
    /*
      I'm assuming the median of an even number of things is the mean
      of the two middle items. In theory what we want to do is merge
      the two databases, sort that and average the middle two items.
      Obviously that isn't lg(n) time, we just need to get the same
      result as doing that would.
     ,*/
    if(is_even(n)){
      db1_median = (query(db1,k) + query(db1,k+1))/2;
      db2_median = (query(db2,k) + query(db2,k+1))/2;
    } else {
      db1_median = query(db1,k);
      db2_median = query(db2,k);
    }
    //insure that the first database has a lower median
    if(db1_median > db2_median){
      swap(db1,db2);
    }
    //max of the first data base is less than the min of the second
    //averaging the two will give the median
    int db1_max = query(db1,n-1);
    int db2_min = query(db2,0);
    if(db2_min > db1_max){
      return ((db1_max + db2_min)/2);
    }
    //Use a binary search to find the 2 locations in the
    //databases that are the closest to equidistant from
    //the two medians, start with the first database
    int cur_index = n;
    int *db = db1;
    int i, median, last_index, cur;
//Needs to be revised to take into acount both values being in 1 database
    for(i=0;i<2;i++){
      int score,old_score;
      int move_dist = k/2;
      score = old_score = INT_MAX;
      while(move_dist > 0) {
        cur = query(db, cur_index);
        old_score = score;
        int dist1 = abs(cur - db1_median);
        int dist2 = abs(cur - db2_median);
        score = abs(dist1-dist2);
        if(score >= old_score){
          cur = query(db, old_index);
          break;
        }
        old_index = cur_index;
        if(dist1 > dist2){
          cur_index -= move_dist;
        } else {
          cur_index += move_dist;
        }
        if(cur_index > n || cur_index < 0){
          raise_error();
        }
        move_dist/=2;
      }
      median += cur;
      cur_index = 0;
      db = db2;
    }
    return median/2;
  }
#+END_SRC

If we think of the two databases as numberlines, where the first database
has the smaller median there are two cases.
case 1 is where they don't overlap, i.e:
1.    A_0-A_1--A_{n/2}--A_n
2.                          B_0-B_1--B_{n/2}--B_n
In this case the median is just (A_n + B_0)/2, since those are the two middle
values. the more complicated case is when they do overlap, i.e:
1. A_0-A_1--A_{n/2}--A_n
2         B_0-B_1--B_{n/2}--B_n
