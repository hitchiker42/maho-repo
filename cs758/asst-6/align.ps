%!PS-Adobe-3.0
%%Title: align.c
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Mon Oct 13 09:41:21 2014
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/**) c n
( * \\file align.c) N
( *) N
( *) N
( *) N
( * \\author jtd7) N
( * \\date 03-10-2011) N
( */) N
() p n
(#include) K
( ") p
(align_io.h) str
(") p n
(#include) K
( ") p
(dfs_solver.h) str
(") p n
(#include) K
( <sys/time.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <assert.h>) p n
() N
(typedef) K
( ) p
(int) k
(\(*compute_alignment\)\() p
(char) k
(*, ) p
(unsigned) k
( ) p
(int) k
(, ) p
(char) k
(*, ) p
(unsigned) k
( ) p
(int) k
(\);) p n
() N
(/* Gets the time of day in seconds. */) c n
(static) K
( ) p
(double) k
( get_current_seconds\() p
(void) k
(\){) p n
(    ) S
(double) k
( sec, usec;) p n
(    ) S
(struct) k
( timeval tv;) p n
() N
(    ) S
(if) K
( \(gettimeofday\(&tv, ) p
(NULL) K
(\) < 0\) {) p n
(        perror\(") S
(gettimeofday failed) str
("\);) p n
(        exit\(EXIT_FAILURE\);) N
(    }) N
() N
(    sec = tv.tv_sec;) N
(    usec = tv.tv_usec;) N
() N
(    ) S
(return) K
( sec + \(usec / 1000000\);) p n
(}) N
() N
() N
(/*) c n
( * Loads the tokens from the files and calls the output_diff\(\) routine) N
( * to actually output the differences.) N
( */) N
(static) K
( ) p
(int) k
( align_files\() p
(char) k
( *f0, ) p
(char) k
( *f1, compute_alignment c\){) p n
(    ) S
(int) k
( err = 0;) p n
(    ) S
(char) k
( *ary0, *ary1;) p n
(    ) S
(unsigned) k
( ) p
(int) k
( n0, n1;) p n
(    ) S
(double) k
( start, end;) p n
() N
(    printf\(") S
(Diffing %s and %s.\\n) str
(", f0, f1\);) p n
() N
(    err = load_token_arrays\(f0, f1, &ary0, &n0, &ary1, &n1\);) N
(    ) S
(if) K
( \(err\) ) p
(return) K
( 1;) p n
() N
(    printf\(") S
(%s contains %u characters.\\n) str
(", f0, n0\);) p n
(    printf\(") S
(%s contains %u characters.\\n) str
(", f1, n1\);) p n
() N
(    start = get_current_seconds\(\);) N
() N
(    ) S
(if) K
( \(c != ) p
(NULL) K
(\) err = c\(ary0,n0,ary1,n1\);) p n
(    ) S
(else) K
( err = 1;) p n
() N
(    end = get_current_seconds\(\);) N
(    fprintf\(stdout, ") S
(time: %f seconds\\n) str
(", end - start\);) p n
() N
(    free\(ary0\);) N
(    free\(ary1\);) N
() N
(    ) S
(return) K
( err;) p n
(}) N
() N
(/*) c n
( * Print the usage string and exit with failure status.) N
( */) N
(align.c) (Page 1/5) (Oct 12, 14 20:48) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(static) K
( ) p
(void) k
( usage\() p
(void) k
(\){) p n
(    fprintf\(stderr, ") S
(Usage\\n) str
(" ") p
(align <alg> <file0> <file1>\\n) str
("\);) p n
(    exit\(EXIT_FAILURE\);) N
(}) N
() N
() N
(int) k
( dyn_programming_solution\() p
(char) k
( *str1, ) p
(unsigned) k
( ) p
(int) k
( str_len1,) p n
(                             ) S
(char) k
( *str2, ) p
(unsigned) k
( ) p
(int) k
( str_len2\){) p n
(#include) K
( <stdint.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <limits.h>) p n
(  #ifdef NDEBUG) N
(  #undef DEBUG) N
(  #endif) N
(  ) S
(/*) c n
(I get warnings from -Wpedantic if I use these, which is why I have) N
(debug code all enclosed in preprocessor conditionals) N
(#ifndef NDEBUG) N
(#define DEBUG_PRINT\(fmt,args...\) fprintf\(stderr,fmt,##args\)) N
(#else) N
(#define DEBUG_PRINT\(...\)) N
() N
(#endif) N
(  */) N
(#ifdef) K
( DEBUG) p n
(#define) K
( DEBUG_PRINT\(fmt,...\) fprintf\(stderr,fmt,##__VA_ARGS__\)) p n
(#endif) K n
(  ) p
(typedef) K
( ) p
(struct) k
( align_result align_result;) p n
(  ) S
(typedef) K
( ) p
(struct) k
( grid_entry grid_entry;) p n
(  ) S
(struct) k
( align_result {) p n
(    ) S
(char) k
( *alignment;) p n
(    ) S
(int) k
( max_score;) p n
(  };) N
(  ) S
(struct) k
( grid_entry {) p n
(    ) S
(int) k
(32_t score;) p n
(    uint32_t parent;) N
(  };) N
(    ) S
(//make sure the first string is longer, just to simplify things) c n
(  ) p
(//also so we can put it in a row instead of a column) c n
(  ) p
(int) k
( switched=0;) p n
(  ) S
(if) K
(\(str_len2 > str_len1\){) p n
(    ) S
(char) k
( *temp = str1;) p n
(    ) S
(int) k
( temp2 = str_len1;) p n
(    str1 = str2;) N
(    str_len1 = str_len2;) N
(    str2 = temp;) N
(    str_len2 = temp2;) N
(    switched=1;) N
(  }) N
(  #ifdef DEBUG) N
(  DEBUG_PRINT\(") S
(starting dynamic programming algorithm\\n) str
("\);) p n
(  #endif) N
(  ) N
(  ) N
(  ) S
(int) k
(32_t len1 = str_len1+1;) p n
(  ) S
(int) k
(32_t len2 = str_len2+1;) p n
(  grid_entry* grid = malloc\() S
(sizeof) K
(\(grid_entry\)*len1*len2\);) p n
(  ) S
(/* I don't like using 2-d arrays \(i.e a grid_entry**\), so I use) c n
(     a 1-D array and use pointer arithmetic to calculate indices,) N
(     just a heads up.) N
(   */) N
(  memset\(grid, ') p
(\\0) str
(', ) p
(sizeof) K
(\(grid_entry\)*len1*len2\);) p n
(  ) S
(int) k
( i,j;) p n
(  ) S
(/*) c n
(    The idea of this algoritm is to use a len1xlen2 grid whoes elements) N
(    are the best possible score at for that location. matches give a) N
(    score of +1 and mismatches/insertions/deletions given a score of -1.) N
(align.c) (Page 2/5) (Oct 12, 14 20:48) title
border
grestore
(Printed by ) rhead
(align.c) (1/3) (Monday October 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() c n
(    The elements also hold the index of the previous element in the) N
(    sequence used to get to that element, so the actual best alignment) N
(    can be computed.) N
() N
(    movements from non diagonals represent insertions/deletions and) N
(    movements from diagonals represent matches. up is a gap in str1) N
(    while left is a gap in str2) N
() N
(    Update for fitting with the program spec:) N
(    match = 1, anything else = 0) N
(   */) N
(  ) p
(/*  if\(str1[0] == str2[0]\){) c n
(    grid[0] = \(grid_entry\){1,0};) N
(  } else {) N
(    grid[0] = \(grid_entry\){-1,0};) N
(    }*/) N
(  grid[0] = \(grid_entry\){0,0};) p n
(  ) S
(//the first row/column can only be composed of insertions, so) c n
(  ) p
(//they are easy to fill) c n
(  ) p
(for) K
(\(i=1;i<len1;i++\){) p n
(    grid[i] = \(grid_entry\){grid[i-1].score-1, i-1};) N
(  }) N
(  ) S
(for) K
(\(j=1;j<len2;j++\){) p n
(    grid[j*len1] = \(grid_entry\){grid[\(j-1\)*len1].score-1, \(j-1\)*len1};) N
(  }) N
(#ifdef) K
( DEBUG) p n
(  DEBUG_PRINT\(") S
(starting body of dynamic programming algorithm\\n) str
(") p n
(              ") S
(Length of 1st string = %d, length of second string = %d\\n) str
(",) p n
(              len1,len2\);) N
(#endif) K n
(  ) p
(//now comes the actual meat of the algorithm) c n
(  uint32_t len = len1;) p n
(  ) S
(int) k
(32_t final_score = 0;) p n
(  ) S
(for) K
(\(j=1;j<len2;j++\){) p n
(    ) S
(for) K
(\(i=1;i<len1;i++\){) p n
(      ) S
(/* Apperently we don't do mismatches at all) c n
(      int32_t match = \(str1[i]==str2[j]?1:-1\) +) N
(        grid[\(\(j-1\)*len\)+\(i-1\)].score;) N
(      */) N
(      ) p
(int) k
(32_t match;) p n
(      ) S
(if) K
(\(str1[i-1]==str2[j-1]\){) p n
(        ) S
(//        fprintf\(stderr, "Match i==%d; j==%d\\n",i,j\);) c n
(        match = grid[\(j-1\)*len + \(i-1\)].score+1;) p n
(      } ) S
(else) K
( {) p n
(        match = INT_MIN;) N
(      }) N
(      ) S
(int) k
(32_t del = grid[\(j*len\)+\(i-1\)].score-1;) p n
(      ) S
(int) k
(32_t ins = grid[\(\(j-1\)*len\)+i].score-1;) p n
(      ) S
(int) k
(32_t best = match;) p n
(      grid_entry *loc = grid+\(\(j*len\)+i\);) N
(      ) S
(if) K
(\(del > best\){best = del;}) p n
(      ) S
(if) K
(\(ins > best\){best = ins;}) p n
(      ) S
(if) K
(\(best == match\){) p n
(        assert\(best != INT_MIN\);) N
(        *loc = \(grid_entry\){best,\(\(j-1\)*len\)+\(i-1\)};) N
(      } ) S
(else) K
( ) p
(if) K
( \(best == ins\){) p n
(        *loc = \(grid_entry\){best,\(\(j-1\)*len+i\)};) N
(      } ) S
(else) K
( {) p
(//if \(best == del\){) c n
(        *loc = \(grid_entry\){best,\(j*len\)+\(i-1\)};) p n
(      }) N
(    }) N
(  }) N
(#if) K
( 0) p n
(  ) S
(for) K
(\(j=0;j<len2;j++\){) p n
(    fprintf\(stderr,") S
(\\n) str
("\);) p n
(    ) S
(for) K
(\(i=0;i<len1;i++\){) p n
(      fprintf\(stderr,") S
(%d\\t) str
(",grid[\(j*len\)+i].score\);) p n
(    }) N
(align.c) (Page 3/5) (Oct 12, 14 20:48) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  }) p n
(  fprintf\(stderr,") S
(\\n) str
("\);) p n
(#endif) K n
() p n
(  ) S
(//the longest possible path is len1+len2, so allocate that much) c n
(  ) p
(//construct string representing the aligned sequences) c n
(  ) p
(char) k
( *top = malloc\() p
(sizeof) K
(\() p
(char) k
(\)*\(len1+len2\)\);) p n
(  ) S
(char) k
( *top_end = top+len1+len2-1;) p n
(  ) S
(char) k
( *str1_ptr = str1 + str_len1 - 1;) p n
(  ) S
(char) k
( *bottom = malloc\() p
(sizeof) K
(\() p
(char) k
(\)*\(len1+len2\)\);) p n
(  ) S
(char) k
( *bottom_end = bottom+len1+len2-1;) p n
(  ) S
(char) k
( *str2_ptr = str2 + str_len2 - 1;) p n
(  ) S
(char) k
( *top_ptr= top_end;) p n
(  *top_ptr--=') S
(\\0) str
(';) p n
(  ) S
(char) k
( *bottom_ptr = bottom_end;) p n
(  *bottom_ptr--=') S
(\\0) str
(';) p n
(  i=len1-1,j=len2-1;) N
(  ) S
(while) K
(\(i>0 || j>0\){) p n
(    ) S
(/*    if\(i>0 && j>0 && grid[j*len+i].score==grid[\(j-1\)*len+\(i-1\)].score+1\){) c n
(      *top_ptr--=*str1_ptr--;) N
(      *bottom_ptr--=*str2_ptr--;) N
(      i--;j--;) N
(    } else if \(i>0 && grid[j*len+i].score==grid[j*len+\(i-1\)].score-1\){) N
(      *top_ptr--=*str1_ptr--;) N
(      *bottom_ptr--='-';) N
(      i--;) N
(    } else if \(j>0 && grid[j*len+i].score==grid[\(j-1\)*len+i].score-1\){) N
(      *bottom_ptr--=*str2_ptr--;) N
(      *top_ptr--='-';) N
(      j--;) N
(    } else {) N
(      fprintf\(stderr,"Unknown error, aborting\\n"\);) N
(      abort\(\);) N
(      }*/) N
(      ) p n
(    grid_entry loc = grid[j*len+i];) N
(    ) S
(int) k
(32_t up = \(\(j-1\)*len+i\);) p n
(    ) S
(int) k
(32_t left = \(j*len+\(i-1\)\);) p n
(    ) S
(int) k
(32_t diag = \(\(j-1\)*len + \(i-1\)\);) p n
(    ) S
(int) k
(32_t next = loc.parent;) p n
(    ) S
(if) K
(\(next == up\){) p n
(      *top_ptr--=') S
(-) str
(';) p n
(      *bottom_ptr--=*str2_ptr--;) N
(      j--;) N
(    } ) S
(else) K
( ) p
(if) K
(\(next == left\){) p n
(      *top_ptr--=*str1_ptr--;) N
(      *bottom_ptr--=') S
(-) str
(';) p n
(      i--;) N
(    } ) S
(else) K
( ) p
(if) K
(\(next == diag\){) p n
(      *top_ptr--=*str1_ptr--;) N
(      *bottom_ptr--=*str2_ptr--;) N
(      i--;) N
(      j--;) N
(      final_score++;) N
(    } ) S
(else) K
( {) p n
(      fprintf\(stderr,") S
(Unknown Error, Aborting\\n) str
("\);) p n
(      abort\(\);) N
(      }) N
(  }) N
(  ) S
(//  assert\(i==0\);assert\(j==0\);) c n
(  *top_ptr = *str1_ptr;) p n
(  *bottom_ptr = *str2_ptr;) N
(#ifdef) K
( DEBUG) p n
(  printf\(") S
(Final string length = %ld\\n) str
(",top_end-top_ptr\);) p n
(  printf\(") S
(Final string length = %ld\\n) str
(",bottom_end-bottom_ptr\);) p n
(#endif) K n
(    top_ptr++;) p n
(    bottom_ptr++;) N
(  printf\(") S
(Alignment Score: %d\\n) str
(",final_score\);) p n
(align.c) (Page 4/5) (Oct 12, 14 20:48) title
border
grestore
(Printed by ) rhead
(align.c) (2/3) (Monday October 13, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(//If we switched the strings for processing switch them back for output) c n
(  ) p
(if) K
(\(switched\){) p n
(    ) S
(char) k
( *temp1=top_ptr;) p n
(    ) S
(char) k
( *temp2=top_end;) p n
(    top_ptr = bottom_ptr;) N
(    top_end = bottom_end;) N
(    bottom_ptr = temp1;) N
(    bottom_end = temp2;) N
(  }) N
(  ) S
(//print lines with a maximum length of 75 + 3\(for...\) per line) c n
(  ) p
(int) k
( max_len = 75;) p n
(  ) S
(while) K
(\(1\){) p n
(    ) S
(if) K
(\(\(top_ptr+max_len\) > top_end || \(bottom_ptr+max_len\) > bottom_end\){) p n
(      printf\(") S
(%.*s\\n%.*s\\n\\n) str
(",max_len,top_ptr,max_len,bottom_ptr\);) p n
(      ) S
(break) K
(;) p n
(    } ) S
(else) K
( {) p n
(      printf\(") S
(%.*s...\\n%.*s...\\n\\n) str
(",max_len,top_ptr,max_len,bottom_ptr\);) p n
(    }) N
(    top_ptr+=max_len;) N
(    bottom_ptr+=max_len;) N
(  }) N
(  ) S
(//  printf\("Sequence 1: %s\\n", top_ptr+1\);) c n
(  ) p
(//  printf\("Sequence 2: %s\\n", bottom_ptr+1\);) c n
() p n
(  ) S
(/* Here is the thing you have to fill in.*/) c n
(  ) p
(/* Find the alignment */) c n
(  ) p
(/* print the max score */) c n
(  ) p
(/* Display the alignment */) c n
(  free\(top\);free\(bottom\);free\(grid\);) p n
(  ) S
(return) K
( 0;) p n
(}) N
() N
() N
(int) k
( main\() p
(int) k
( argc, ) p
(char) k
( *) p
(const) K
( argv[]\){) p n
(        ) S
(char) k
( *alg, *f0, *f1;) p n
(        compute_alignment c = ) S
(NULL) K
(;) p n
(        ) S
(int) k
( err;) p n
() N
(        ) S
(if) K
(\(argc < 3\) usage\(\);) p n
(        alg = argv[1];) N
(        f0 = argv[2];) N
(        f1 = argv[3];) N
(        ) S
(if) K
(\(strcmp\(alg,") p
(dfs) str
("\) == 0\){) p n
(                c = &call_dfs_solver; ) S
(/* from dfs_solver.c */) c n
(        }) p
(else) K
( ) p
(if) K
(\(strcmp\(alg,") p
(dyn) str
("\) == 0\){) p n
(                c = &dyn_programming_solution;) N
(        }) S
(else) K
({) p n
(                printf\(") S
(Algorithm %s not recognized, expected dfs or dyn\\n) str
(",) p n
(                       alg\);) N
(                ) S
(return) K
( EXIT_FAILURE;) p n
(        }) N
(        err = align_files\(f0, f1,c\);) N
(        ) S
(if) K
( \(err\) ) p
(return) K
( EXIT_FAILURE;) p n
(        ) S
(return) K
( EXIT_SUCCESS;) p n
(}) N
(align.c) (Page 5/5) (Oct 12, 14 20:48) title
border
grestore
(Printed by ) rhead
(align.c) (3/3) (Monday October 13, 2014) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
