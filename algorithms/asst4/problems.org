#+TITLE: CS 758 Assignment 4
#+AUTHOR: Tucker DiNapoli (tpm29)
#+DATE: <2016-02-19 Fri>
#+OPTIONS: H:0 toc:nil
#+LATEX_HEADER: \usepackage{fullpage,fontspec}
#+LATEX_HEADER: \setmonofont{DejaVu Sans Mono}[{SizeFeatures={Size=10}}]
1.
   Everything in my code works, including deletion. I used a combination of the
   book and the rbtree implementation in the linux kernel to write my code. If
   you look at my code verses the code in the kernel, I think my code is
   sufficiently different but I figure it's worth citing my sources. I did
   directly borrow some comments, but being comments they don't actually
   effect my code, they just make it easier to follow along. I suppose
   it's worth noting that I store the color of each node in the least
   significant bit of the parent pointer. This works because malloc has to
   return memory that is aligned to 8 bytes (on a 64 bit platform), meaning the
   lowest 3 bits of any malloc'd pointer are 0.

   Performance was interesting, for random data the normal binary search tree
   outperformed the red black tree, but for sorted data the red black tree was
   much better. The attached plots show this, the first plot is for sorted data
   while the second is for random data. For random data the normal binary
   search tree ends up being roughly balanced (unless you have a really large
   amount of data), while for sorted data it ends up being behaving like a
   linked list. There are two guesses I have for why the bst was faster for
   random data. First is that when running the harness I tested the red black
   tree first, meaning the data was already in the cache when the bst was
   tested (I did actually test this and reversing the order did speed up the
   rbtree). Secondly my rbtree uses a function pointer for comparisons which
   adds a constant amount of overhead per comparison, since for random data the
   time complexity of both the rbtree and bst are about the same this overhead
   causes the rbtree to be slower.
2. 
  #+BEGIN_SRC lisp
  ;;I'm not exactly sure how you want us to prove our code words, so
  ;;I'm just going to explain my code
  
  ;;Each call to insert-node either inserts a new node and returns
  ;;or decends one level in the tree, so progress is always being made
  (defun insert-node (n key)
  ;;I forgot to handle the empty node in my original code
    (if(null n) (return (make-node key) ;;I added this line after class
      (if (< key n.key)
      ;;If the new key is smaller than the current one either
      ;;add the new key as a left child if the current node doesn't
      ;;have one, or recurse into the left subtree, followed by a 
      ;;symmetric case for the right.
        (if n.left (return (insert-node n.left key))
          (setq n.left (make-node key)))
        (if n.right (return (insert-node n.right key))
          (setq n.right (make-node key))))))
  #+END_SRC
3. (13.1-7):
  Assuming we don't include empty children in the count:
  If n is a power of 2 there can be at most 2 red nodes per black node and the
  ratio is 2:1, in this case the entire bottom row is red. If n is not a power of
  2 the largest ratio depends on n. If we let l be the largest power of 2 smaller
  than n and m the smallest power of 2 greater than n we can describe the ratio
  based on l and m. If n is closer to l than m the largest ammount of red nodes
  comes from having the top l nodes in a 2:1 ratio plus n-l black nodes, for a
  ratio of (2/3)l : (1/3)l + (n - l). If n is closer to m than l the highest
  possible ratio comes from attempting to have a 2:1 ratio in a tree with m
  nodes, but lacking (m-n) red nodes. This gives a ratio of
  (2/3)m - (m-n) : (1/3)m.
   
  The smallest possible ratio is 0:n, that is no red nodes at all.

4. (13.3-1):
  It is possible to have a red black tree with no red nodes, in this case the
  tree would always be perfectly balanced but the fixup procedure after insertion
  would be significantly more complicated. If z was set to black at the end of
  rb-insert no red nodes would ever be inserted and the whole tree would be
  black. By inserting red nodes balancing the tree becomes eaiser, speeding up
  insertion (and deletion) at the cost of having an imperfectly balanced 

5. (13.3-4):
  Since we know z and z.p, and z.p.p are not T.nil, since we just inserted z as
  the child of z.p and z.p isn't the root since it's red, so its parent can't be
  nil, the only value that could possibly be T.nil is y. The color of y is only
  set when y.color is red, since T.nil.color is black we can never set the color
  of T.nil in RB-insert-fixup. Since we can't set the color of T.nil, we
  obviously can't mark it red.
