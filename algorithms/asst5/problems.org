#+TITLE: CS 758 Assignment 5
#+AUTHOR: Tucker DiNapoli (tpm29)
#+DATE: <2016-02-26 Fri>
#+OPTIONS: H:0 toc:nil
#+LATEX_HEADER: \usepackage{fullpage,fontspec}
#+LATEX_HEADER: \setmonofont{DejaVu Sans Mono}[{SizeFeatures={Size=10}}]
1. Everything in my code is working including additions/deletions. There shouldn't
   be too many unexpected things in my code. One thing to note is I don't use C
   strings, I use strings with an explicit length. This lets me mmap the word
   file and not have to copy each string, I could do the same with the
   dictionary but that would be too much work. I use an array of 52 children
   per node in the trie, but I feel like there should be some way to use 26
   nodes plus a bitmask to keep track of which case of letter is present.

   Performance wise the trie runs quite quickly even for large numbers of
   words, and is looking at the graph is clearly O(k), with k being the length
   of the key. The list however is so slow that I thought that it wasn't
   actually working at first. I made some optimizations to it so it runs a bit
   faster but it still takes upwards of 10 seconds to check an incorrect word.
   It should be O(Nk) with k the length of the key and N the size of the
   dictionary, which is backed up by the graph being fairly linear, just with a
   much steeper slope than the graph for the trie. 

   I printed the code for spell_check.c as a diff between the skeleton code and
   my code, to save paper.
2. (12-2):
  Lexicographic sorting, given two arrays a and b, of lengths n and m a is less
  than b if:
  1. for some integer j, j<(min(n,m)) a_i == b_i for i=0...j and a_j < b_j
  2. n<m and a_i == b_i for i=0...n
     
  use a radix tree to lexicographicaly sort a set S of bit strings with total
  length n, in \Theta(n) time.


3. (15.1-2):
  Given a rod of length 5 with values per length of 0/1in, 4/2in, 7/3in,
  the greedy algorihm will cut a 3in rod, and be left with a one inch rod for a
  total value of 7, but cutting the rod into 2 2in pieces will give a total value
  of 8.

5. (15.1-3):
  The core algoritm is the same, so it suffices to show how to calculate the
  maximum profit, since finding the actual method is the same as the normal rod
  cutting problem.
  
  The bottom-up-cut-rod procedure should be replaced with the following, where
  the additional parameter is the cost per cut
  #+BEGIN_EXAMPLE
  modified-bottom-up-cut-rod(p,n,c)
  declare r[n];
  r[0] = 0;
  for j = 1 to n
      q = p[j] #set q to the profit without cutting the rod at all
      for i = 1 to j-1
        q = max(q, p[i] + r[j-i] - c);
      end
    r[j] = q
  end
  end
  #+END_EXAMPLE
